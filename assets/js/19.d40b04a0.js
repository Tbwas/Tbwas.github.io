(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{283:function(t,s,n){"use strict";n.r(s);var a=n(38),e=Object(a.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"lua中的环境表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#lua中的环境表","aria-hidden":"true"}},[t._v("#")]),t._v(" Lua中的环境表")]),t._v(" "),n("h3",{attrs:{id:"概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#概念","aria-hidden":"true"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),n("p",[t._v("lua 将所有的全局变量都存在于一个常规的 table 中，这个 table 称为"),n("strong",[t._v("环境表")]),t._v("或简称为"),n("strong",[t._v("环境")]),t._v("。(lua 会提供一个全局环境表_G)。默认情况下，每个函数的环境都是_G，因此该函数中的所有全局变量都将从_G中查找。当一个函数被创建时，它将从创建它的函数中继承环境。我们可以使用"),n("code",[t._v("getfenv(f)")]),t._v("来获取当前函数的环境，也可以通过"),n("code",[t._v("setfevn(f, table)")]),t._v("来更改当前函数环境。")]),t._v(" "),n("h3",{attrs:{id:"getfenv-f"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#getfenv-f","aria-hidden":"true"}},[t._v("#")]),t._v(" getfenv(f)")]),t._v(" "),n("p",[t._v("可以用来获取某一函数的环境，参数"),n("code",[t._v("f")]),t._v("可以是一个函数还可以是一个栈层级。"),n("code",[t._v("f")]),t._v("设为0会得到_G，设为1会得到当前调用"),n("code",[t._v("getfenv(f)")]),t._v("的函数环境，设为2会得到调用当前函数的函数环境，以此类推......")]),t._v(" "),n("h3",{attrs:{id:"setfenv-f-table"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#setfenv-f-table","aria-hidden":"true"}},[t._v("#")]),t._v(" setfenv(f, table)")]),t._v(" "),n("p",[t._v("可以用来为某一函数设置一个新的环境。参数"),n("code",[t._v("f")]),t._v("为0会更改当前运行线程的环境；设为1会更改当前函数的环境；设为2会更改调用当前函数的函数环境，以此类推......")]),t._v(" "),n("h3",{attrs:{id:"实践"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实践","aria-hidden":"true"}},[t._v("#")]),t._v(" 实践")]),t._v(" "),n("p",[t._v("了解基本原理之后，我们就可以利用"),n("strong",[t._v("环境")]),t._v("来搞点事情。比如：我们可以 hook lua 中所有全局变量的访问与设置，实现如下。")]),t._v(" "),n("div",{staticClass:"language-lua line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-lua"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("change_enviroment")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("local")]),t._v(" new_env "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("local")]),t._v(" new_env_meta "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        __index "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("table"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--调用change_enviroment的函数中，所有对全局变量的访问操作都会执行到这里")]),t._v("\n                  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        __newindex "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("table"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n                     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--调用change_enviroment的函数中，所有设置全局变量的操作都会执行到这里")]),t._v("\n                     "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setmetatable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("new_env"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" new_env_meta"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setfenv")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" new_env"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--设置调用change_enviroment的函数环境为new_env")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--设置下环境，此后，所有全局变量的相关操作都会被hook")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("change_enviroment")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--会执行到__index中")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xxx"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--由于是设置一个全局函数，所以会执行到__newindex中")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("myFunction")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br")])]),n("p",[t._v("上述例子，我们就可以很轻易地从 lua 通信到原生中，进而可以搞一些事情，比如 hotfix。")])])},[],!1,null,null,null);s.default=e.exports}}]);